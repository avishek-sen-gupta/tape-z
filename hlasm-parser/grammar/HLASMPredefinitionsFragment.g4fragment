grammar HlasmParser;
import HlasmLexer;

@header {package com.mojo.hlasm;}
options {tokenVocab = HlasmLexer;}


// index part represents both index expressions and length expressions
startRule: assemblerInstruction;
displacement: explicitOffset | implicitZeroDisplacement | relativeDisplacement | symbolAddress;
expressionOrDisplacement: expression | displacement;
relativeDisplacement: ASTERISK displacement;
explicitOffset: offsetExpression explicitIndexBase?;
implicitZeroDisplacement: explicitIndexBase;
//symbol: IDENTIFIER;
macroSymbol: AMPERSAND IDENTIFIER;
offsetExpression: expression;
explicitIndexBase: bothIndexBase | onlyIndex | onlyBase;
bothIndexBase: OPEN_PAREN indexExpression COMMA baseExpression CLOSE_PAREN;
onlyIndex: OPEN_PAREN indexExpression CLOSE_PAREN;
onlyBase: OPEN_PAREN COMMA baseExpression CLOSE_PAREN;
indexExpression: expression;
baseExpression: expression;
arguments
    : expression (COMMA expression)*
    ;

register: expression;
registerPair: expression;
floatingPointRegister: expression;
floatingPointRegisterPair: expression;
immediateValue: expression;
signedImmediateValue: expression;
maskField: expression;
controlRegister: expression;
accessRegister: expression;
relativeImmediateOperand: relativeDisplacement;
vectorRegister: expression;
vectorRegisterPair: expression;
symbolAddress: ADDRESS_CONSTANT OPEN_PAREN expression CLOSE_PAREN;
function: IDENTIFIER OPEN_PAREN arguments? CLOSE_PAREN;
functionAddress: EQUALS function;
constant: addressOf | expressionOrDisplacement;
//typeIdentifier: IDENTIFIER;
literalPool: (IDENTIFIER STRING_LITERAL) | ('X' STRING_LITERAL) | ('C' STRING_LITERAL);
literalAddress: EQUALS literalPool;
addressOf: 'A(' expressionOrDisplacement (COMMA expressionOrDisplacement)* CLOSE_PAREN;
typeSpec: IDENTIFIER;

expression
    : additiveExpression
    ;

additiveExpression
    : multiplicativeExpression
    | additiveExpression '+' multiplicativeExpression
    | additiveExpression '-' multiplicativeExpression
    ;

multiplicativeExpression
    : unaryExpression
    | multiplicativeExpression '*' unaryExpression
    | multiplicativeExpression '/' unaryExpression
    | multiplicativeExpression '%' unaryExpression
    ;

unaryExpression
    : primaryExpression
    | '+' unaryExpression
    | '-' unaryExpression
    ;

primaryExpression
    : INTEGER_LITERAL
    | IDENTIFIER
    | macroSymbol
    | literalPool
    | literalAddress
    | function
    | functionAddress
    | OPEN_PAREN expression CLOSE_PAREN
    | '*'
//    | lengthOfExpression
    ;
